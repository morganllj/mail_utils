# setup to run ldap2zimbra:
# choose a user.  Su to that user.  Root's okay but not necessary.
# mkdir -p ldap2zimbra/log ldap2zimbra/child_status
# cp run_ldap2zimbra.sh ldap2zimbra.pl ZimbraUtil.pm ZimbraUtil.cf ldap2zimbra
# cd ldap2zimbra
# chmod 700 ldap2zimbra.pl run_ldap2zimbra.sh
# vi run_ldap2zimbra.sh
#   Change bin_path if ldap2zimbra is in a directory other than 'ldap2zimbra.'
#   Change default parameters to ldap2zimbra.pl if you like.
# vi ZimbraUtil.cf
# su
# cd /usr/local
# tar xfz ~/zcs-6.0.7_GA_2483-src.tgz
# yum install perl-XML-Parser perl-LDAP
#  (need to get these from EPEL?)
# ldap2zimbra/run_ldap2zimbra.sh -n
# 

# TODO: mailalternateaddresses!

use ZimbraUtil;
# users who are special to zimbra, won't ever be modified or deleted
#@zimbra_special = qw/admin galsync.* ham.* spam.* virus-quarantine.* admin-calendar testuser.* notifylinkadmin/;
@zimbra_special = qw//;

# domains local to this zimbra install.  Often just one but can be many.  This list
# must match your domain list in Zimbra or you will get errors adding
# users as ldap2zimbra runs.
# I *think* this is only relevant to multi-domain mode.
@local_domains = qw//;

# relative directory where files will be created to track children
#  process while script runs.  If ldap2zimbra.pl is in a directory
#  called "ldap2zimbra" you'll need to create a directory within that
#  directory and put its name here.  This is to work around problems
#  with IPC in Perl.  I'm not thrilled about it but it does work
#  reliably.  It's bad form, I know, but prefix with a '/' even
#  though it's relative.
$relative_child_status_path = "/child_status";

$in_multi_domain_mode = 0; # use uid attribute and concat the domain provided by ldap2zimbra
#$in_multi_domain_mode = 1; # use mail attribute including the domain.

# $create_archives = 0;  # don't create archive accounts
$create_archives = 1; # create archive accounts

# ldap defaults
%l_params = (
      l_host => "hostname",
      l_binddn => "cn=directory manager",  # or equivalent
      l_bindpass => "pass",
      l_base => "basedn",

     # debugging:
#    l_filter =>
#     "(|(orghomeorgcd=9500)(orghomeorgcd=8020)(orghomeorgcd=5020))",
#       "(orghomeorgcd=9500)";
     # production:
     l_filter => "(objectclass=orgZimbraPerson)"
 );

# rdn of the LDAP group containing accounts that will be excluded from ldap2zimbra
#   processing.
# leave blank if you don't want to exclude 
#$exclude_group_rdn = "";  # assumed to be in $ldap_base
$exclude_group_rdn = "cn=orgexcludes";  # assumed to be in $ldap_base

# Zimbra defaults
%z_params = (
    z_server => "hostname",
    z_pass => "pass",
    z_domain => "domain.org",  # mail domain, ignored if $in_multi_domain_mode == 1
#    z_domain => "domain.org",  # mail domain, ignored if $in_multi_domain_mode == 1
# leave archive_mailhost blank if you do not use Zimbra Archiving
    z_archive_mailhost => "hostname",
    z_archive_suffix => "archive",
#     # TODO: look up cos by name instead of requiring the user enter the cos id.
#     # production:
#     # z_archive_cos_id => "249ef618-29d0-465e-86ae-3eb407b65540",
#     # dev:
     z_archive_cos_id => "c0806006-9813-4ff2-b0a9-667035376ece"
);

$z_params{z_archive_domain} =  $z_params{z_domain} . "." . $z_params{z_archive_suffix};

# TODO: make sure this is true.
# if this attribute is non-empty archive accounts will be named after this attribute.
#  Currently this is the only way archiving works--account creation
#  will be skipped if $create_archives == 1 and $archive_name_attr is
#  empty or not defined.
$archive_name_attr = "orgghrsintemplidno";

# Global Calendar settings.  ldap2zimbra can add a calendar share
# to every user.
# comment if you don't wish to share a calendar to all users
# @global_cals = (
#     { owner => "calendar-admin\@" . $zu->get_default_domain(),
#       name  => "~Academic Calendar",
#       path  => "/~Academic Calendar",
#       exists => 0 },
#     { owner => "calendar-pd\@" . $zu->get_default_domain(),
#       name  => "~ProfDev Calendar",
#       path => "/~ProfDev Calendar",
#       exists => 0 }
# );

# TODO: figure out how to call get_default_domain() from ZimbraUtil.pm
# @global_cals = (
#      { owner => "admin-calendar\@ext.domain.org",
#        name  => "~University Holidays",
#        path  => "/~University Holidays",
#        exists => 0 },
# );


$z_params{z_url} = "https://" . $z_params{z_server} . ":7071/service/admin/soap/";


# max delete recurse depth -- how deep should we go before giving up

# searching for users to delete.  If you have thousands of users in
# Zimbra the libraries will throw an exception when we attemtp to get
# a full list.  We have to break our search down by alphabet (a, b,
# c.. aa, bb, cc etc) recursively.  Should the recursion get
# infinitely deep we need to know when to stop.  5 is a little shallow
# (many thousand restored_ accounts).  15 seems about right.

# 5 == aaaaa*
$max_recurse = 15;

# attributes that will not be looked up in ldap when building z2l hash
# (see sub get_z2l() for more detail)
@z2l_literals = qw/( )/;


# map zimbra attributes (left hand side [lhs]) to ldap attributes
# (right hand side [rhs]) anything prefaced with \& is a subroutine in
# ZimbraUtil.  It does expect one argument.  See any of the examples
# below.
#
# Two attributes in a list ref (["givenname", "sn"]) will be concatenated together with spaces in between.
$z2l = {
    "cn" =>                    ["cn"],
    "zimbrapreffromdisplay" => ["givenname", "sn"],
    "givenname" =>             ["givenname"],
    "sn" =>                    ["sn"],
    "company" =>               ["orghomeorg"],
    "st" =>                    ["orgworkstate"],
    "l" =>                     ["orgworkcity"],
    "postalcode" =>            ["orgworkzip"],

#    "co" =>                        \&build_phone_fax,
     "co" =>			    [""],
     "telephonenumber" =>			    \&build_phone,
     "facsimiletelephonenumber" =>			    \&build_fax,
#     "fax" =>			    \&build_fax,
     
    "street" =>                    \&build_address,
    "displayname" =>               \&build_last_first,
    "zimbrapreffromdisplay" =>     \&build_last_first,

    "zimbraarchiveaccount" =>      \&build_archive_account,
    "amavisarchivequarantineto" => \&build_archive_account,

    "zimbramailhost" =>            \&build_org_zmailhost,	

# provision a split domain account:
#    "zimbramailhost" =>            \&build_org_zmailhost,
#    "zimbraarchiveaccount" =>      \&build_archive_account,
#    "amavisarchivequarantineto" => \&build_archive_account,

# if provisioning a split domain host     
#    "zimbramailtransport" =>       \&build_split_domain_zmailtransport
};

# $z2l = {
#     "cn" =>                    ["cn"],
#     "zimbrapreffromdisplay" => ["givenname", "sn"],
#     "givenname" =>             ["givenname"],
#     "sn" =>                    ["sn"],
#     "zimbramailhost" =>        \&get_z_mailhost,
#      "displayname" =>          ["givenname", "sn"],
# };

$archive_z2l = {
    # TODO: add cn, givenname and sn here so a search by user's name shows the archive..
    "zimbramailhost" => \&get_z_archive_mailhost,
    "zimbracosid"    => \&get_archive_cos_id,
};
